// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../../../../../src/backend/impls/objectbox/models/models.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 7419244569066266196),
      name: 'ObjectBoxStore',
      lastPropertyId: const IdUid(4, 3677248801338209880),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1858780610237179333),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2256416726389092989),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(1, 3645033738238218113)),
        ModelProperty(
            id: const IdUid(3, 8181895676109246629),
            name: 'numberOfTiles',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3677248801338209880),
            name: 'numberOfBytes',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'tiles', srcEntity: 'ObjectBoxTile', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(2, 9006700906555106229),
      name: 'ObjectBoxTile',
      lastPropertyId: const IdUid(4, 7354783822834437324),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1583610199049416297),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6188685410059426284),
            name: 'url',
            type: 9,
            flags: 34848,
            indexId: const IdUid(2, 3427244788486794902)),
        ModelProperty(
            id: const IdUid(3, 1617954085447053640),
            name: 'lastModified',
            type: 10,
            flags: 8,
            indexId: const IdUid(3, 2057043365010558859)),
        ModelProperty(
            id: const IdUid(4, 7354783822834437324),
            name: 'bytes',
            type: 23,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 3843657930463993464),
            name: 'stores',
            targetId: const IdUid(1, 7419244569066266196))
      ],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 9006700906555106229),
      lastIndexId: const IdUid(3, 2057043365010558859),
      lastRelationId: const IdUid(1, 3843657930463993464),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    ObjectBoxStore: EntityDefinition<ObjectBoxStore>(
        model: _entities[0],
        toOneRelations: (ObjectBoxStore object) => [],
        toManyRelations: (ObjectBoxStore object) =>
            {RelInfo<ObjectBoxTile>.toManyBacklink(1, object.id): object.tiles},
        getId: (ObjectBoxStore object) => object.id,
        setId: (ObjectBoxStore object, int id) {
          object.id = id;
        },
        objectToFB: (ObjectBoxStore object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.numberOfTiles);
          fbb.addFloat64(3, object.numberOfBytes);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final numberOfTilesParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final numberOfBytesParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final object = ObjectBoxStore(
              name: nameParam,
              numberOfTiles: numberOfTilesParam,
              numberOfBytes: numberOfBytesParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<ObjectBoxStore>(object.tiles, store,
              RelInfo<ObjectBoxTile>.toManyBacklink(1, object.id));
          return object;
        }),
    ObjectBoxTile: EntityDefinition<ObjectBoxTile>(
        model: _entities[1],
        toOneRelations: (ObjectBoxTile object) => [],
        toManyRelations: (ObjectBoxTile object) =>
            {RelInfo<ObjectBoxTile>.toMany(1, object.id): object.stores},
        getId: (ObjectBoxTile object) => object.id,
        setId: (ObjectBoxTile object, int id) {
          object.id = id;
        },
        objectToFB: (ObjectBoxTile object, fb.Builder fbb) {
          final urlOffset = fbb.writeString(object.url);
          final bytesOffset = fbb.writeListInt8(object.bytes);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, urlOffset);
          fbb.addInt64(2, object.lastModified.millisecondsSinceEpoch);
          fbb.addOffset(3, bytesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final urlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final lastModifiedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final bytesParam = const fb.Uint8ListReader(lazy: false)
              .vTableGet(buffer, rootOffset, 10, Uint8List(0)) as Uint8List;
          final object = ObjectBoxTile(
              url: urlParam, lastModified: lastModifiedParam, bytes: bytesParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<ObjectBoxTile>(object.stores, store,
              RelInfo<ObjectBoxTile>.toMany(1, object.id));
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [ObjectBoxStore] entity fields to define ObjectBox queries.
class ObjectBoxStore_ {
  /// see [ObjectBoxStore.id]
  static final id =
      QueryIntegerProperty<ObjectBoxStore>(_entities[0].properties[0]);

  /// see [ObjectBoxStore.name]
  static final name =
      QueryStringProperty<ObjectBoxStore>(_entities[0].properties[1]);

  /// see [ObjectBoxStore.numberOfTiles]
  static final numberOfTiles =
      QueryIntegerProperty<ObjectBoxStore>(_entities[0].properties[2]);

  /// see [ObjectBoxStore.numberOfBytes]
  static final numberOfBytes =
      QueryDoubleProperty<ObjectBoxStore>(_entities[0].properties[3]);
}

/// [ObjectBoxTile] entity fields to define ObjectBox queries.
class ObjectBoxTile_ {
  /// see [ObjectBoxTile.id]
  static final id =
      QueryIntegerProperty<ObjectBoxTile>(_entities[1].properties[0]);

  /// see [ObjectBoxTile.url]
  static final url =
      QueryStringProperty<ObjectBoxTile>(_entities[1].properties[1]);

  /// see [ObjectBoxTile.lastModified]
  static final lastModified =
      QueryIntegerProperty<ObjectBoxTile>(_entities[1].properties[2]);

  /// see [ObjectBoxTile.bytes]
  static final bytes =
      QueryByteVectorProperty<ObjectBoxTile>(_entities[1].properties[3]);

  /// see [ObjectBoxTile.stores]
  static final stores = QueryRelationToMany<ObjectBoxTile, ObjectBoxStore>(
      _entities[1].relations[0]);
}
